install helm

-> we need to install the Secrets Store CSI Driver in the cluster so use helm for installation

helm repo add secrets-store-csi-driver \
  https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts

helm install -n kube-system csi-secrets-store \
  --set syncSecret.enabled=true \
  --set enableSecretRotation=true \
  secrets-store-csi-driver/secrets-store-csi-driver


-> now there many providers for this driver like azure , aws and gcp . we need to install the 
aws ASCP (AWS Secrets and Configuration Provider )

kubectl apply -f https://raw.githubusercontent.com/aws/secrets-store-csi-driver-provider-aws/main/deployment/aws-provider-installer.yaml

-> now we need to deploy the secretproviderclass 

-> then create the policy which has the read access to the aws secrets manager and annotate this to the service account (OIDC for IAM) , IRSA(IAM Role for Service Account)

-> we can use the service account to deploy the pod and mount the secretproviderclass as volume or set as the env inside the container .


reference -> How do I resolve the "Your current user or role does not have access to Kubernetes objects on this EKS cluster" error in Amazon EKS? ->

https://repost.aws/knowledge-center/eks-kubernetes-object-access-error


--------
to add the role to the cluster for the access ->
edit the config present in kube-system namespace called "aws-auth"
and these to the data
  mapRoles: |
    - rolearn: arn:aws:iam::533267334695:role/eks-access-role-for-codebuild
      username: codebuildrole
      groups:
      - system:bootstrappers
      - system:nodes
      - system:masters

adding system masters in the production is not good practise , becouse it provides admin access to the cluster.
